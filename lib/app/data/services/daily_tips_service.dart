// lib/app/data/services/daily_tips_service.dart

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:get/get.dart';
import 'package:flutter/foundation.dart' show debugPrint;
import 'package:marinette/app/data/models/daily_tip.dart';

class DailyTipsService extends GetxService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final RxList<DailyTip> tips = <DailyTip>[].obs;
  final RxBool isLoading = false.obs;

  static const String collectionName = 'daily_tips';

  // Add a method to expose the FirebaseFirestore instance
  FirebaseFirestore getFirestore() {
    return _firestore;
  }

  Future<DailyTipsService> init() async {
    await loadTips();
    return this;
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ –∏–∑ Firestore
  Future<void> loadTips() async {
    isLoading.value = true;
    try {
      final snapshot = await _firestore
          .collection(collectionName)
          .orderBy('order')
          .get();

      List<DailyTip> loadedTips = snapshot.docs.map((doc) {
        return DailyTip.fromFirestore(doc.id, doc.data());
      }).toList();

      tips.value = loadedTips;
      debugPrint('Loaded ${tips.length} daily tips');
    } catch (e) {
      debugPrint('Error loading daily tips: $e');
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Firestore, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      _initializeLocalTips();
    } finally {
      isLoading.value = false;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Firestore
  void _initializeLocalTips() {
    tips.value = [
      DailyTip(id: '1', tip: 'ice_cube_therapy', icon: '‚ùÑÔ∏è', order: 0),
      DailyTip(id: '2', tip: 'apply_thinnest_to_thickest', icon: 'üß¥', order: 1),
      DailyTip(id: '3', tip: 'spf_on_cloudy_days', icon: '‚òÄÔ∏è', order: 2),
      DailyTip(id: '4', tip: 'stay_hydrated', icon: 'üíß', order: 3),
      DailyTip(id: '5', tip: 'clean_makeup_brushes', icon: 'üñåÔ∏è', order: 4),
      DailyTip(id: '6', tip: 'beauty_sleep', icon: 'üò¥', order: 5),
      DailyTip(id: '7', tip: 'pat_dont_rub', icon: 'üëÅÔ∏è', order: 6),
      DailyTip(id: '8', tip: 'silk_pillowcase', icon: 'üõèÔ∏è', order: 7),
      DailyTip(id: '9', tip: 'face_masks_on_clean_skin', icon: 'üé≠', order: 8),
      DailyTip(id: '10', tip: 'dont_forget_neck', icon: '‚ú®', order: 9),
    ];
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–∞
  Future<bool> addTip(String tip, String icon) async {
    try {
      isLoading.value = true;

      int nextOrder = 0;
      if (tips.isNotEmpty) {
        nextOrder = tips.map((t) => t.order).reduce((a, b) => a > b ? a : b) + 1;
      }

      final newTip = DailyTip(
        id: '', // Firestore —Å–æ–∑–¥–∞—Å—Ç ID
        tip: tip,
        icon: icon,
        order: nextOrder,
      );

      final docRef = await _firestore
          .collection(collectionName)
          .add(newTip.toFirestore());

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
      tips.add(DailyTip(
        id: docRef.id,
        tip: tip,
        icon: icon,
        order: nextOrder,
      ));

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
      tips.sort((a, b) => a.order.compareTo(b.order));

      return true;
    } catch (e) {
      debugPrint('Error adding daily tip: $e');
      return false;
    } finally {
      isLoading.value = false;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞
  Future<bool> updateTip(DailyTip tip) async {
    try {
      isLoading.value = true;

      await _firestore
          .collection(collectionName)
          .doc(tip.id)
          .update(tip.toFirestore());

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
      final index = tips.indexWhere((t) => t.id == tip.id);
      if (index != -1) {
        tips[index] = tip;
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
      tips.sort((a, b) => a.order.compareTo(b.order));

      return true;
    } catch (e) {
      debugPrint('Error updating daily tip: $e');
      return false;
    } finally {
      isLoading.value = false;
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞
  Future<bool> deleteTip(String tipId) async {
    try {
      isLoading.value = true;

      await _firestore
          .collection(collectionName)
          .doc(tipId)
          .delete();

      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
      tips.removeWhere((t) => t.id == tipId);

      return true;
    } catch (e) {
      debugPrint('Error deleting daily tip: $e');
      return false;
    } finally {
      isLoading.value = false;
    }
  }

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Å–æ–≤–µ—Ç–æ–≤
  Future<bool> reorderTips(int oldIndex, int newIndex) async {
    try {
      isLoading.value = true;

      if (oldIndex < newIndex) {
        newIndex -= 1;
      }

      final item = tips.removeAt(oldIndex);
      tips.insert(newIndex, item);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      for (int i = 0; i < tips.length; i++) {
        final tip = tips[i].copyWith(order: i);
        tips[i] = tip;

        await _firestore
            .collection(collectionName)
            .doc(tip.id)
            .update({'order': i});
      }

      return true;
    } catch (e) {
      debugPrint('Error reordering daily tips: $e');
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      await loadTips();
      return false;
    } finally {
      isLoading.value = false;
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å Firestore
  Future<bool> synchronizeLocalTips() async {
    try {
      isLoading.value = true;

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–≤–µ—Ç—ã
      final snapshot = await _firestore.collection(collectionName).get();
      for (final doc in snapshot.docs) {
        await doc.reference.delete();
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
      for (int i = 0; i < tips.length; i++) {
        final tip = tips[i].copyWith(order: i);
        final docRef = await _firestore
            .collection(collectionName)
            .add(tip.toFirestore());

        // –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
        tips[i] = DailyTip(
            id: docRef.id,
            tip: tip.tip,
            icon: tip.icon,
            order: i
        );
      }

      return true;
    } catch (e) {
      debugPrint('Error synchronizing daily tips: $e');
      return false;
    } finally {
      isLoading.value = false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –¥–Ω—è
  DailyTip getCurrentDailyTip() {
    if (tips.isEmpty) {
      return DailyTip(id: 'default', tip: 'stay_hydrated', icon: 'üíß');
    }

    final dayOfYear =
        DateTime.now().difference(DateTime(DateTime.now().year)).inDays;
    final tipIndex = dayOfYear % tips.length;
    return tips[tipIndex];
  }
}